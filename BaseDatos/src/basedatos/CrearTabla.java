/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basedatos;


import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author oski_
 */
public class CrearTabla extends javax.swing.JDialog {

    /**
     * Creates new form CrearTabla
     */
    public CrearTabla(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBAgregar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBEditar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jBAbrir = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Título 1", "Título 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("Añadir Fila");
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jBAgregar.setText("Agregar");

        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBEditar.setText("Editar");

        jBEliminar.setText("Eliminar");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("xxxxxxxxxxxxx");

        jLabel2.setText("Clave Principal");

        jLabel3.setText("Descripción");

        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("Dialog", 3, 12)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jBAbrir.setText("Abrir");
        jBAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAbrirActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basedatos/Iconos/eliminar.png"))); // NOI18N
        jButton1.setToolTipText("Eliminar Fila");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarFila(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basedatos/Iconos/anadir.png"))); // NOI18N
        jButton2.setToolTipText("Añadir Fila");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annadirFilaNueva(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basedatos/Iconos/anadir.png"))); // NOI18N
        jButton3.setToolTipText("Añadir Columna");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annadirColumna(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/basedatos/Iconos/eliminar.png"))); // NOI18N
        jButton4.setToolTipText("Eliminar Columna");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarColumna(evt);
            }
        });

        jLabel4.setText("Nombre Tabla");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBAbrir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBEliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                                .addComponent(jTextField2)))))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBAgregar)
                    .addComponent(jBGuardar)
                    .addComponent(jBEditar)
                    .addComponent(jBEliminar)
                    .addComponent(jBAbrir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /*Con este método obtengo el nombre del archivo que van a abrir*/
    public static String sacarNombre(String archivoAbrir) {
        String nombreArchivo = "";
        try {
            String[] parts = archivoAbrir.split("\\\\");
            int numeroParticiones = parts.length;
            nombreArchivo = parts[numeroParticiones - 1];
            System.out.println(nombreArchivo);

        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Ruta inválida", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return nombreArchivo;
    }

    public String clavePrincipal(String archivoAbrir, String nombreTabla) throws SQLException {
        String catalog = null;
        String columnName = "";
        String schema = null;
        String tableName = nombreTabla;
        Connection conexion = DriverManager.getConnection("jdbc:sqlite:" + sacarNombre(archivoAbrir));
        DatabaseMetaData databaseMetaData = conexion.getMetaData();
        ResultSet result = databaseMetaData.getPrimaryKeys(catalog, schema, tableName);

        while (result.next()) {
            columnName = result.getString(4);
            System.out.println(columnName);
        }

        return columnName;
    }

    private void jBAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAbrirActionPerformed
        jTable1.setModel(new DefaultTableModel()); //Limpiamos la tabla
        String archivoAbrir = "";
        FileNameExtensionFilter filtroSQLite = new FileNameExtensionFilter("SQLite", "db");    //Se mete un filtro 

        JFileChooser abrir = new JFileChooser();
        //Esto es para abrir en una ruta especificada
        File dir = new File("F:\\Desarrollo Aplicaciones Multiplataforma - copia\\DAM2\\Acceso a datos\\EjerciciosVarios\\Pruebas\\Nueva Carpeta\\BaseDatos");
        abrir.setCurrentDirectory(dir);

        abrir.addChoosableFileFilter(filtroSQLite);
        abrir.setFileFilter(filtroSQLite);
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int opcion = abrir.showOpenDialog(this);    //Guarda la opcion pulsada, 0 si es aceptar

        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                archivoAbrir = abrir.getSelectedFile().getCanonicalPath();
                //direcciónAbrir = archivoAbrir;//lo guardo para despues

                try {
                    
                    //Cargar el driver. Necesitamaos carga el driver de MySQL. 
                    Class.forName("org.sqlite.JDBC");
                    //Para Sqlite es: "org.sqlite.JDBC"
                    // Establecemos la conexion con la BD
                    Connection conexion = DriverManager.getConnection("jdbc:sqlite:" + sacarNombre(archivoAbrir));
                    /*jdbc:mysql:indica que estamos utilizando del driver JDBC para MySQL
                     */
                    //Establecemos la conexion con la base de datos nuestra 

                    //preparamos la consulta a hacer para realizarla con Statement y llamamamos al metodo createStatement, el método executeQuery()  sirve para realizar una consulta a la BD y se le pasa un staring en el que	está la consulta SQL*/
                    Statement sentencia = conexion.createStatement();
                    ResultSet resul = sentencia.executeQuery("SELECT * FROM departamentos");
//                    "select name from sqlite_master where type = \\\"table\\\";"
//                    ResultSetMetaData metaDatos = resul.getMetaData();
//        
//                    System.out.println(resul);
//                    JOptionPane.showMessageDialog(null, resul, "Mensaje en la barra de titulo", JOptionPane.WARNING_MESSAGE);

                    //Pongo titulo, la ruta absoluta de la tabla que se trabaja
                    this.setTitle(archivoAbrir);
                    //Pongo el nombre de la tabla para que se sepa cual se esta trabajando
                    jLabel1.setText(sacarNombre(archivoAbrir));
                    //Pongo la clave principal
                    jTextField2.setText(clavePrincipal(archivoAbrir, "departamentos"));

                    //Es para rellenar la tabla sin saber nada
                    ResultSetMetaData metaDatos = resul.getMetaData();
                    // Se obtiene el número de columnas.
                    int numeroColumnas = metaDatos.getColumnCount();
                    // Se crea un array de etiquetas para rellenar
                    Object[] etiquetas = new Object[numeroColumnas];
                    // Se obtiene cada una de las etiquetas para cada columna
                    for (int i = 0; i < numeroColumnas; i++) {
                        // Nuevamente, para ResultSetMetaData la primera columna es la 1. 
                        etiquetas[i] = metaDatos.getColumnLabel(i + 1);
                    }
                    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                    modelo.setColumnIdentifiers(etiquetas);

                    //Esto me sirve para las filas, para ir rellenandolas en el bucle 
                    Object[] fila = new Object[numeroColumnas];

                    // Recorremos el resultado para visualizar cada fila
                    int contadorInterno = 0;
                    while (resul.next())//se eejcutaa mientras haya mas datos
                    {//devolvemos los campos con los get de los valores y entre parentesisi le especificamo la posicion
//                        System.out.println(resul.getObject(1) + " " + resul.getObject(2) + " "
//                                + resul.getObject(3) + " " + resul.getObject(4) + " " + resul.getObject(5));

                        //Con este bucle se va rellenando las filas, indistintamente del tipo y la cantidad de objetos que haya.
                        while (contadorInterno < numeroColumnas) {
                            fila[contadorInterno] = resul.getObject(contadorInterno + 1);
                            System.out.println(resul.getObject(contadorInterno + 1));
                            contadorInterno++;
                        }
                        modelo.addRow(fila); // Añade una fila al final
                        contadorInterno = 0;
                    }
                    //Se liberan todos los recursos y se cierra la conexión
                    resul.close();    // Cerrar ResultSet
                    sentencia.close();    // Cerrar Statement
                    conexion.close();    //Cerrar conexion

                } catch (ClassNotFoundException | SQLException cn) {
                }
                //obtener el nombre del fichero
                archivoAbrir = abrir.getSelectedFile().getName();  //guardo el nombre del archivo a abrir
            } catch (IOException e) {
            } catch (IllegalArgumentException e) {
                JOptionPane.showMessageDialog(null, "No se pudo encontrar el archivo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            archivoAbrir = "Operación cancelada";
        }

        
    }//GEN-LAST:event_jBAbrirActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void eliminarFila(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarFila
       try{
        if (jTable1.getRowCount() > 0) { //Compruebo que haya filas para borrar
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            modelo.removeRow(jTable1.getSelectedRow());  // borra la fila selecionada
        } else {
            Toolkit.getDefaultToolkit().beep();   //Sino hay fila pita el ordenador
        }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No ha selecionado FILA", "No se ha podido Borrar", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_eliminarFila

    private void annadirFilaNueva(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annadirFilaNueva
        try {
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            Object[] fila = new Object[1];
            modelo.addRow(fila); // Añade una fila al final
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No ha selecionado COLUMNA", "No se ha podido Borrar", JOptionPane.ERROR_MESSAGE);
        
        }
    }//GEN-LAST:event_annadirFilaNueva

    private void annadirColumna(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annadirColumna
        try {
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            String nombreColumna =JOptionPane.showInputDialog(null, "Nombre Columna");
            String columna = nombreColumna;
            modelo.addColumn(columna); // Añade una columna al final
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No ha selecionado COLUMNA", "No se ha podido Borrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_annadirColumna

    private void EliminarColumna(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarColumna
        try {
            if (jTable1.getColumnCount() > 0) { //Compruebo que haya columna para borrar
                DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                modelo.setColumnCount(jTable1.getColumnCount()-1);
            } else {
                Toolkit.getDefaultToolkit().beep();   //Sino hay fila pita el ordenador
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No ha selecionado COLUMNA", "No se ha podido Borrar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EliminarColumna

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrearTabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrearTabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrearTabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrearTabla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CrearTabla dialog = new CrearTabla(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAbrir;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBEditar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
